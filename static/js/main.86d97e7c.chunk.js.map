{"version":3,"sources":["components/Tasks/Task/Task.js","components/FilterButton/FilterButton.js","components/Tasks/Tasks.js","components/Tasks/TaskAdder/TaskAdder.js","containers/App.js","reportWebVitals.js","index.js"],"names":["task","props","taskClassName","done","checking","className","draggable","onDragStart","event","onDragLeave","onDragEnd","onDragOver","onDrop","type","value","checked","id","onChange","changed","onClick","clicked","FilterButton","buttonClass","isPressed","aria-pressed","setFilter","name","FILTER_MAP","Все","Активные","isDone","Завершенные","FILTER_NAMES","Object","keys","tasks","undoneTasksCount","filter","length","doneTasksIds","map","index","push","filterList","sort","orderSort","reverse","TaskAdder","placeholder","onKeyDown","pressedEnter","added","App","state","input","total","currentTask","changeHandler","setState","target","addTaskHandler","newTask","Date","now","Math","floor","random","order","updatedTasks","deleteTaskHandler","taskId","Array","isArray","delTasksOrder","elem","indexOf","newTotal","newOrder","dec","i","keyDownHandler","key","isDoneHandler","taskIndex","findIndex","t","filterSetter","filterName","dragStartHandler","dragEndHandler","closest","classList","remove","dragOverHandler","preventDefault","add","dropHandler","taskDiv","taskList","a","b","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0VA0BeA,EArBF,SAAPA,EAAQC,GACV,IAAMC,EAAiBD,EAAME,KAAQ,cAAgB,OAC/CC,EAAWH,EAAME,KACvB,OACI,sBAAKE,UAAWH,EACZI,WAAW,EACXC,YAAa,SAACC,GAAD,OAAWP,EAAMM,YAAYC,EAAOR,IACjDS,YAAa,SAACD,GAAD,OAAWP,EAAMQ,YAAYD,IAC1CE,UAAW,SAACF,GAAD,OAAWP,EAAMS,UAAUF,IACtCG,WAAY,SAACH,GAAD,OAAWP,EAAMU,WAAWH,IACxCI,OAAQ,SAACJ,GAAD,OAAWP,EAAMW,OAAOJ,EAAOR,IAN3C,UAOI,iCACI,uBAAOa,KAAK,WAAWC,MAAOb,EAAME,KAAMY,QAASX,EAAUY,GAAG,WAAWC,SAAUhB,EAAMiB,UAC3F,sBAAMb,UAAU,YAAhB,SAA6BJ,EAAMa,WAEvC,cAAC,gBAAD,CAAeT,UAAU,gBACrBc,QAASlB,EAAMmB,cCJhBC,G,QAbM,SAACpB,GAClB,IAAIqB,EAAerB,EAAMsB,UAAa,iBAAmB,MACzD,OACI,wBACIV,KAAK,SACLR,UAAWiB,EACXE,eAAcvB,EAAMsB,UACpBJ,QAAS,kBAAMlB,EAAMwB,UAAUxB,EAAMyB,OAJzC,SAKI,+BAAOzB,EAAMyB,WCJnBC,G,QAAa,CACfC,qBAAK,kBAAM,GACXC,mDAAU,SAAA7B,GAAI,OAAKA,EAAK8B,QACxBC,qEAAa,SAAA/B,GAAI,OAAIA,EAAK8B,UAGxBE,EAAeC,OAAOC,KAAKP,GAgDlBQ,EA9CD,SAAClC,GACX,IAAMmC,EAAmBnC,EAAMkC,MAAME,QAAO,SAAArC,GAAI,OAAKA,EAAK8B,UAAQQ,OAE5DC,EAAe,GACrBtC,EAAMkC,MAAMK,KAAI,SAACxC,EAAMyC,GACnBzC,EAAK8B,QAAUS,EAAaG,KAAK1C,EAAKgB,OAG1C,IAAM2B,EAAaX,EAAaQ,KAAI,SAAAd,GAAI,OACpC,cAAC,EAAD,CAEAA,KAAMA,EACNH,UAAWG,IAASzB,EAAMoC,OAC1BZ,UAAW,kBAAMxB,EAAMwB,UAAUC,KAH5BA,MAMT,OACI,sBAAKrB,UAAU,oBAAf,UACKJ,EAAMkC,MAAME,OAAOV,EAAW1B,EAAMoC,SACpCO,KAAK3C,EAAM4C,WACXL,KAAI,SAACxC,EAAMyC,GACR,OAAO,cAAC,EAAD,CACHrB,QAAS,kBAAMnB,EAAMmB,QAAQpB,EAAKgB,KAClCE,QAAS,SAACV,GAAD,OAAWP,EAAMiB,QAAQV,EAAOR,EAAKgB,KAC9CF,MAAOd,EAAKc,MAEZX,KAAMH,EAAK8B,OACXvB,YAAa,SAACC,GAAD,OAAWP,EAAMM,YAAYC,EAAOR,IACjDS,YAAa,SAACD,GAAD,OAAWP,EAAMQ,YAAYD,IAC1CE,UAAW,SAACF,GAAD,OAAWP,EAAMS,UAAUF,IACtCG,WAAY,SAACH,GAAD,OAAWP,EAAMU,WAAWH,IACxCI,OAAQ,SAACJ,GAAD,OAAWP,EAAMW,OAAOJ,EAAOR,KANlCA,EAAKgB,OAOb8B,UACL,sBAAKzC,UAAU,wBAAf,UACI,kKAA2B,iCAAS+B,OACnCO,EACD,0LACI,cAAC,eAAD,CACItC,UAAU,eACVc,QAAS,WAAOlB,EAAMmB,QAAQmB,gBC5BvCQ,G,QAtBG,SAAC9C,GAEf,OACQ,sBAAKI,UAAU,iBAAf,UACI,8HACA,gCACI,uBACIA,UAAU,aACVQ,KAAK,OACLG,GAAG,YACHC,SAAUhB,EAAMiB,QAChB8B,YAAY,wFACZlC,MAAOb,EAAMa,MACbmC,UAAWhD,EAAMiD,eACrB,cAAC,aAAD,CACI7C,UAAU,aACVc,QAASlB,EAAMkD,gBC4IxBC,G,oNAtJXC,MAAQ,CACNlB,MAAO,GACPmB,MAAO,GACPjB,OAAQ,qBACRkB,MAAO,EACPC,YAAa,M,EAGfC,cAAgB,SAACjD,GACf,EAAKkD,SAAS,CAACJ,MAAO9C,EAAMmD,OAAO7C,S,EAGrC8C,eAAiB,WACf,IAAIL,EAAQ,EAAKF,MAAME,MACvB,GAAyB,KAArB,EAAKF,MAAMC,MAAc,CAC3B,IAAMO,EAAU,CACd7C,GAAI8C,KAAKC,MAAQC,KAAKC,MAAsB,IAAhBD,KAAKE,UACjCpD,MAAO,EAAKuC,MAAMC,MAClBxB,QAAQ,EACRqC,QAASZ,GAELa,EAAY,YAAO,EAAKf,MAAMlB,OACpCiC,EAAa1B,KAAKmB,GAClB,EAAKH,SAAS,CAACvB,MAAOiC,EAAcd,MAAM,GAAIC,MAAOM,EAAQM,U,EAIjEE,kBAAoB,SAACC,GACnB,IAAIF,EAAY,YAAO,EAAKf,MAAMlB,OAC7BoC,MAAMC,QAAQF,KACjBA,EAAS,CAACA,IAEZ,IAAIG,EAAgBL,EAAa/B,QAAO,SAAAqC,GAAI,OAAIJ,EAAOK,QAAQD,EAAK1D,KAAO,KAAGwB,KAAI,SAAAkC,GAAI,OAAIA,EAAKP,SAE3FS,GADJR,EAAeA,EAAa/B,QAAO,SAAAqC,GAAI,OAAIJ,EAAOK,QAAQD,EAAK1D,IAAM,MACzCsB,OAC5B8B,EAAeA,EAAa5B,KAAI,SAAAkC,GAI9B,IAHA,IAEIG,EAFAC,EAAM,EACNX,EAAQO,EAAKP,MAETY,EAAI,EAAGA,EAAIN,EAAcnC,OAAQyC,IASzC,OARMN,EAAcM,GAAKZ,GACrBW,IAEFD,EAAWV,EAAQW,EACrBJ,EAAI,2BACCA,GADD,IAEFP,MAAOU,OAKX,EAAKnB,SAAS,CAACvB,MAAOiC,EAAcb,MAAOqB,K,EAG7CI,eAAiB,SAACxE,GACC,UAAdA,EAAMyE,KACP,EAAKrB,kB,EAITsB,cAAgB,SAAC1E,EAAOQ,GACtB,IAAMmE,EAAY,EAAK9B,MAAMlB,MAAMiD,WAAU,SAAAC,GAC3C,OAAOA,EAAErE,KAAOA,KAEZhB,EAAI,eACL,EAAKqD,MAAMlB,MAAMgD,IAEtBnF,EAAK8B,OAAStB,EAAMmD,OAAO5C,QAC3B,IAAMqD,EAAY,YAAO,EAAKf,MAAMlB,OACpCiC,EAAae,GAAanF,EAC1B,EAAK0D,SAAS,CAACvB,MAAOiC,K,EAGxBkB,aAAe,SAACC,GACd,EAAK7B,SAAS,CAACrB,OAAQkD,K,EAGzBC,iBAAmB,SAAChF,EAAOR,GACzB,EAAK0D,SAAS,CAACF,YAAaxD,K,EAG9ByF,eAAiB,SAACjF,GAChBA,EAAMmD,OAAO+B,QAAQ,YAAYC,UAAUC,OAAO,a,EAGpDC,gBAAkB,SAACrF,GACjBA,EAAMsF,iBACNtF,EAAMmD,OAAO+B,QAAQ,YAAYC,UAAUI,IAAI,a,EAGjDC,YAAc,SAACxF,EAAOR,GACpBQ,EAAMsF,iBACN,IAAIG,EAAUzF,EAAMmD,OAAO+B,QAAQ,YACnC,GAAIO,EAAJ,CACA,IAAIC,EAAQ,YAAO,EAAK7C,MAAMlB,OAC9B+D,EAAWA,EAAS1D,KAAI,SAAA6C,GAOtB,OANIA,EAAErE,KAAOhB,EAAKgB,KAChBqE,EAAC,2BAAOA,GAAP,IAAUlB,MAAO,EAAKd,MAAMG,YAAYW,SAEvCkB,EAAErE,KAAO,EAAKqC,MAAMG,YAAYxC,KAClCqE,EAAC,2BAAOA,GAAP,IAAUlB,MAAOnE,EAAKmE,SAElBkB,KAET,EAAK3B,SAAS,CAACvB,MAAO+D,IACtBD,EAAQN,UAAUC,OAAO,c,EAG3B/C,UAAY,SAACsD,EAAGC,GACd,OAAID,EAAEhC,MAAQiC,EAAEjC,MACP,GAEC,G,4CAIZ,WAEE,IAAIhC,EAAQ,KAgBZ,OAfyB,OAArBkE,KAAKhD,MAAMlB,QACbA,EAAQ,cAAC,EAAD,CACAA,MAAOkE,KAAKhD,MAAMlB,MAClBf,QAASiF,KAAKhC,kBACdnD,QAASmF,KAAKnB,cACdzD,UAAW4E,KAAKf,aAChBjD,OAAQgE,KAAKhD,MAAMhB,OACnB9B,YAAa8F,KAAKb,iBAClB/E,YAAa4F,KAAKZ,eAClB/E,UAAW2F,KAAKZ,eAChB9E,WAAY0F,KAAKR,gBACjBjF,OAAQyF,KAAKL,YACbnD,UAAWwD,KAAKxD,aAIxB,sBAAKxC,UAAU,MAAf,UACE,6CACA,gOACA,cAAC,EAAD,CACES,MAAOuF,KAAKhD,MAAMC,MAClBpC,QAASmF,KAAK5C,cACdN,MAAOkD,KAAKzC,eACZV,aAAcmD,KAAKrB,iBAEpB7C,S,GAlJOmE,cCGHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.86d97e7c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { RemoveOutline } from 'react-ionicons';\r\nimport './Task.css';\r\n\r\nconst task = (props) => {\r\n    const taskClassName = (props.done) ? \"Task isDone\" : \"Task\";\r\n    const checking = props.done;\r\n    return (\r\n        <div className={taskClassName}\r\n            draggable={true}\r\n            onDragStart={(event) => props.onDragStart(event, task)}\r\n            onDragLeave={(event) => props.onDragLeave(event)}\r\n            onDragEnd={(event) => props.onDragEnd(event)}\r\n            onDragOver={(event) => props.onDragOver(event)}\r\n            onDrop={(event) => props.onDrop(event, task)} >\r\n            <span>\r\n                <input type=\"checkbox\" value={props.done} checked={checking} id=\"markdone\" onChange={props.changed} />\r\n                <span className=\"TaskValue\">{props.value}</span>\r\n            </span>\r\n            <RemoveOutline className=\"removeOutline\"\r\n                onClick={props.clicked} />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default task;","import React from 'react';\r\n\r\nimport './FilterButton.css';\r\n\r\nconst FilterButton = (props) => {\r\n    let buttonClass = (props.isPressed) ? 'Btn Toggle-btn' : 'Btn';\r\n    return (\r\n        <button \r\n            type=\"button\" \r\n            className={buttonClass}\r\n            aria-pressed={props.isPressed}\r\n            onClick={() => props.setFilter(props.name)}>\r\n            <span>{props.name}</span>\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default FilterButton;","import React from 'react';\r\n\r\nimport Task from './Task/Task';\r\nimport { TrashOutline } from 'react-ionicons';\r\nimport FilterButton from '../FilterButton/FilterButton';\r\n\r\nimport './Tasks.css';\r\n\r\nconst FILTER_MAP = {\r\n    Все: () => true,\r\n    Активные: task => !task.isDone,\r\n    Завершенные: task => task.isDone\r\n  };\r\n\r\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\r\n\r\nconst tasks = (props) => {\r\n    const undoneTasksCount = props.tasks.filter(task => !task.isDone).length;\r\n\r\n    const doneTasksIds = [];\r\n    props.tasks.map((task, index) => {\r\n        task.isDone && doneTasksIds.push(task.id);\r\n    });\r\n    \r\n    const filterList = FILTER_NAMES.map(name => (\r\n        <FilterButton \r\n        key={name} \r\n        name={name}\r\n        isPressed={name === props.filter}\r\n        setFilter={() => props.setFilter(name)} \r\n        />\r\n      ));\r\n    return (\r\n        <div className=\"AllTasksContainer\">\r\n            {props.tasks.filter(FILTER_MAP[props.filter])\r\n            .sort(props.orderSort)\r\n            .map((task, index) => {\r\n                return <Task\r\n                    clicked={() => props.clicked(task.id)}\r\n                    changed={(event) => props.changed(event, task.id)}\r\n                    value={task.value}\r\n                    key={task.id}\r\n                    done={task.isDone}\r\n                    onDragStart={(event) => props.onDragStart(event, task)}\r\n                    onDragLeave={(event) => props.onDragLeave(event)}\r\n                    onDragEnd={(event) => props.onDragEnd(event)}\r\n                    onDragOver={(event) => props.onDragOver(event)}\r\n                    onDrop={(event) => props.onDrop(event, task)} />\r\n              }).reverse() }\r\n            <div className=\"AllTasksContainerInfo\">\r\n                <p>Количество активных дел <strong>{undoneTasksCount}</strong></p>\r\n                {filterList}\r\n                <p>Удалить все завершенные дела\r\n                    <TrashOutline\r\n                        className=\"trashOutline\"\r\n                        onClick={() => {props.clicked(doneTasksIds)}} />\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default tasks;","import React from 'react';\r\n\r\nimport { AddOutline } from 'react-ionicons';\r\nimport './TaskAdder.css';\r\n\r\nconst TaskAdder = (props) => {\r\n\r\n    return(\r\n            <div className=\"InputContainer\">\r\n                <p>Что нужно сделать?</p>\r\n                <div>\r\n                    <input\r\n                        className=\"input-task\" \r\n                        type=\"text\" \r\n                        id=\"mainInput\" \r\n                        onChange={props.changed} \r\n                        placeholder='введите задание' \r\n                        value={props.value}\r\n                        onKeyDown={props.pressedEnter}></input>\r\n                    <AddOutline \r\n                        className=\"addOutline\"\r\n                        onClick={props.added} />\r\n                </div>\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default TaskAdder;","import React, { Component } from 'react';\n\n\nimport Tasks from '../components/Tasks/Tasks';\nimport TaskAdder from '../components/Tasks/TaskAdder/TaskAdder';\n\nimport '../components/Tasks/Task/Task.css';\nimport './App.css';\n\nclass App extends Component {\n\n    state = {\n      tasks: [],\n      input: '',\n      filter: 'Все',\n      total: 0,\n      currentTask: null\n    }\n\n    changeHandler = (event) => {\n      this.setState({input: event.target.value});\n    }\n\n    addTaskHandler = () => {\n      let total = this.state.total;\n      if (this.state.input !== '') {\n        const newTask = {\n          id: Date.now() + Math.floor(Math.random() * 100),\n          value: this.state.input,\n          isDone: false,\n          order: ++total\n        }\n        const updatedTasks = [...this.state.tasks];\n        updatedTasks.push(newTask);\n        this.setState({tasks: updatedTasks, input:'', total: newTask.order});\n      }\n    }\n\n    deleteTaskHandler = (taskId) => {\n      let updatedTasks = [...this.state.tasks];\n      if (!Array.isArray(taskId)){\n        taskId = [taskId];\n      }\n      let delTasksOrder = updatedTasks.filter(elem => taskId.indexOf(elem.id) >= 0).map(elem => elem.order);\n      updatedTasks = updatedTasks.filter(elem => taskId.indexOf(elem.id) < 0);\n      let newTotal = updatedTasks.length;\n      updatedTasks = updatedTasks.map(elem => {\n        let dec = 0;\n        let order = elem.order;\n        let newOrder;\n        for(let i = 0; i < delTasksOrder.length; i++){\n          if( delTasksOrder[i] < order){\n            dec++;\n          }\n          newOrder = order - dec;\n        elem = {\n          ...elem,\n          order: newOrder\n        }\n        return elem;\n        }\n       });\n      this.setState({tasks: updatedTasks, total: newTotal});\n    }\n\n    keyDownHandler = (event) => {\n      if(event.key === 'Enter'){\n        this.addTaskHandler();\n      }\n    }\n\n    isDoneHandler = (event, id) => {\n      const taskIndex = this.state.tasks.findIndex(t => {\n        return t.id === id;\n      });\n      const task = {\n        ...this.state.tasks[taskIndex]\n      };\n      task.isDone = event.target.checked;\n      const updatedTasks = [...this.state.tasks];\n      updatedTasks[taskIndex] = task;\n      this.setState({tasks: updatedTasks}); \n    }\n\n    filterSetter = (filterName) => {\n      this.setState({filter: filterName});\n    }\n\n    dragStartHandler = (event, task) => {\n      this.setState({currentTask: task});\n    }\n\n    dragEndHandler = (event) => {\n      event.target.closest('div.Task').classList.remove(\"Selected\");\n    }\n\n    dragOverHandler = (event) => {\n      event.preventDefault();\n      event.target.closest('div.Task').classList.add(\"Selected\");\n    }\n\n    dropHandler = (event, task) => {\n      event.preventDefault();\n      let taskDiv = event.target.closest('div.Task');\n      if(!taskDiv) return;\n      let taskList = [...this.state.tasks];\n      taskList = taskList.map(t => {\n        if (t.id === task.id){\n          t = {...t, order: this.state.currentTask.order};\n        }\n        if (t.id === this.state.currentTask.id){\n          t = {...t, order: task.order};\n        }\n        return t;\n      })\n      this.setState({tasks: taskList}); \n      taskDiv.classList.remove(\"Selected\");\n    }\n\n    orderSort = (a, b) => {\n      if (a.order > b.order) {\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n\n    render () {\n\n      let tasks = null;\n      if (this.state.tasks !== null){\n        tasks = <Tasks\n                tasks={this.state.tasks}\n                clicked={this.deleteTaskHandler}\n                changed={this.isDoneHandler}\n                setFilter={this.filterSetter}\n                filter={this.state.filter}\n                onDragStart={this.dragStartHandler}\n                onDragLeave={this.dragEndHandler}\n                onDragEnd={this.dragEndHandler}\n                onDragOver={this.dragOverHandler}\n                onDrop={this.dropHandler} \n                orderSort={this.orderSort} />\n      }\n\n      return (\n        <div className=\"App\">\n          <h1>To do List!</h1>\n          <p>Приветствуем вас в нашем приложении!</p>\n          <TaskAdder\n            value={this.state.input}\n            changed={this.changeHandler}\n            added={this.addTaskHandler}\n            pressedEnter={this.keyDownHandler}>\n          </TaskAdder>\n          {tasks}\n        </div>\n      );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}